;;;; An undertone / Extempore demonstration of generative music with Markov
;;;; chains, with a special focus on:
;;;;
;;;; * TBD
;;;;
;;;; Demo steps / script:
;;;;
;;;; * TBD

;;; Chord progression for Journey of the Sorcerer (theme for the Hitchhiker's
;;; Guide to the Galaxy):
;;;
;;; Key: Cm
;;;
;;; .  .  . . | .    . . . | .  Cm . . | .  . . .
;;; .  .  . . | .    . . . | .  .  . . | Ab . . .
;;; .  .  . . | Fm   . . . | F  .  . . | Ab . . .
;;; .  Eb . . | Cm   . . . | .  .  . . | Ab . . .
;;; .  .  . . | Fdim . . . | F  .  . . | Ab . . .
;;; .  .  . . | Eb   . . . | G  .  . . | F  . . .
;;; Cm .  . . | F    . . . | Cm .  . . | F  . . .
;;; Cm .  . . | F    . . . | Cm .  . . | F  . . .
;;; C  .  . . | F    . . . | Cm .  . . | F  . . .
;;; Cm .  . . | Eb   F . . | Cm .  . . | .  . . .
;;; Ab .  . . | .    . . . | F  .  . . | .  . . .
;;; .  .  . . | .    . . . | .
;;;
;;; Chords -> Modes:
;;; * Cm   = i   (natural + melodic minor)
;;; * Fm   = iv  (natural minor)
;;; * F    = IV  (melodic minor)
;;; * Ab   = VI  (natural minor)
;;; * Eb   = III (natural minor)
;;; * Fdim = IVo (?)
;;; * G    = V   (melodic minor)
;;; * C    = I   (major)
;;;
;;; Rewriting the chord progression in modes, we have this:
;;;
;;; .  .   . . | .   .  . . | .  i  . . | .  . . .
;;; .  .   . . | .   .  . . | .  .  . . | VI . . .
;;; .  .   . . | iv  .  . . | IV .  . . | VI . . .
;;; .  III . . | i   .  . . | .  .  . . | VI . . .
;;; .  .   . . | IVo .  . . | IV .  . . | VI . . .
;;; .  .   . . | III .  . . | V  .  . . | IV . . .
;;; i  .   . . | IV  .  . . | i  .  . . | IV . . .
;;; i  .   . . | IV  .  . . | i  .  . . | IV . . .
;;; I  .   . . | IV  .  . . | i  .  . . | IV . . .
;;; i  .   . . | III IV . . | i  .  . . | .  . . .
;;; VI .   . . | .   .  . . | IV .  . . | .  . . .
;;; .  .   . . | .   .  . . | .
;;;
;;; Transitions:
;;;
;;; I   -> IV  (1)
;;; III -> IV  (1) V  (1) i   (1)
;;; IV  -> I   (1) VI (2) i   (7)
;;; IVo -> IV  (1)
;;; V   -> IV  (1)
;;; VI  -> III (2) IV (1) IVo (1) iv (1)
;;; i   -> III (1) IV (5) VI  (3)
;;; iv  -> IV  (1)
;;;
;;; Key changes (Nm=Natural Minor, Mm=Melodic Minor, M=Major):
;;;
;;; .  . . . | .  .  . . | .  Nm . . | .  . . .
;;; .  . . . | .  .  . . | .  .  . . | .  . . .
;;; .  . . . | .  .  . . | Mm .  . . | Nm . . .
;;; .  . . . | .  .  . . | .  .  . . | .  . . .
;;; .  . . . | .  .  . . | Mm .  . . | Nm . . .
;;; .  . . . | .  .  . . | Mm .  . . | .  . . .
;;; .  . . . | .  .  . . | .  .  . . | .  . . .
;;; .  . . . | .  .  . . | .  .  . . | .  . . .
;;; M  . . . | Mm .  . . | .  .  . . | .  . . .
;;; .  . . . | Nm Mm . . | .  .  . . | .  . . .
;;; Nm . . . | .  .  . . | Nm .  . . | .  . . .
;;; .  . . . | .  .  . . | .
;;;
;;; Chord + timing changes (format is chord + beat count + occurances):
;;;
;;; Ab   5  -> Eb   3
;;; Ab   8  -> Eb   1
;;; Ab   8  -> Fm   4
;;; Ab   8  -> Fmin 4
;;; C    4  -> F    4
;;; Cm   15 -> Ab   8
;;; Cm   4  -> Eb   1
;;; Cm   4  -> F    4 (x5)
;;; Cm   8  -> Ab   8
;;; Eb   1  -> F    3
;;; Eb   3  -> Cm   8
;;; Eb   4  -> G    4
;;; F    3  -> Cm   8
;;; F    4  -> Ab   4
;;; F    4  -> Ab   8
;;; F    4  -> C    4
;;; F    4  -> Cm   4 (x6)
;;; Fo   4  -> F    4
;;; Fm   4  -> F    4
;;; G    4  -> F    4
;;; 
;;; Beignning: empty 9 -> Cm 15
;;; End:       Ab    8 -> F  17
;;;
;;; Converted to modes:
;;;
;;; (VI  5)  -> (III 3)
;;; (VI  8)  -> (III 1) (iv  4) (IVo 4)
;;; (I   4)  -> (IV  4)
;;; (i   24) -> (VI  8)
;;; (i   4)  -> (III 1) (IV  4) (IV  4) (IV  4) (IV  4) (IV  4)
;;; (i   8)  -> (VI  8)
;;; (III 1)  -> (IV  3)
;;; (III 3)  -> (i   8)
;;; (III 4)  -> (V   4)
;;; (IV  3)  -> (i   8)
;;; (IV  4)  -> (VI  4) (VI  8) (I   4) (i   4) (i   4) (i   4) (i   4) (i   4) (i   4)
;;; (IVo 4)  -> (IV  4)
;;; (iv  4)  -> (IV  4)
;;; (V   4)  -> (IV  4)

;;; Setup from LFE
;;;
(clear)
(undertone.repl.extempore:start)
(load "/Users/oubiwann/lab/lfe/undertone-presentations/codebeam-america-2021/demos/init.xtm")
(xt.midi:list-devices)

;;; Setup from Extempore
;;;
(sys:load "/Users/oubiwann/lab/lfe/undertone-presentations/codebeam-america-2021/demos/init.xtm")
(sys:load "/Users/dmcgreggor/lab/lfe/undertone-presentations/codebeam-america-2021/demos/init.xtm")
(begin (pm_print_devices) (println))

;; Setup Piano
(define primary-midi-device-id 4) ; MIDI General to DAW running Ravenscroft Piano
(define *midiout* (pm_create_output_stream primary-midi-device-id))
;; MIDI channel 1
(define midi-channel 0)
(define midi-off 0)
(define midi-on 127)

(*metro* 'set-tempo 108)

(define beats-per-measure 2)
(define note-timing 4)
(define low c2)
(define high c4)
(define notes-per-chord 5)
(define key c0)
(define major '^)
(define minor '-)
(define mode minor)

(define triad
  (lambda (root name)
    (cond ((eq? name 'I) (pc:diatonic root '^ 'i))
          ((eq? name 'i) (pc:diatonic root '- 'i))
          ((eq? name 'III) (pc:diatonic root '^ 'iii))
          ((eq? name 'IV) (pc:diatonic root '^ 'iv))
          ((eq? name 'IVo) (ivl:transpose (car (pc:diatonic root '^ 'iv)) '(0 3 6)))
          ((eq? name 'iv) (pc:diatonic root '- 'iv))
          ((eq? name 'V) (pc:diatonic root '^ 'v))
          ((eq? name 'VI) (pc:diatonic root '^ 'vi))
          ((eq? name 'vi) (pc:diatonic root '- 'vi)))))

;; Allowed transitions
(define trans '(((I   4)  (IV  4))
                ((i   24) (VI  8))
                ((i   4)  (III 1) (IV 4) (IV 4) (IV 4) (IV 4) (IV 4))
                ((i   8)  (VI  8))
                ((III 1)  (IV  3))
                ((III 3)  (i   8))
                ((III 4)  (V   4))
                ((IV  3)  (i   8))
                ((IV  4)  (VI  4) (VI 8) (I 4) (i 4) (i 4) (i 4) (i 4) (i 4) (i 4))
                ((IVo 4)  (IV  4))
                ((iv  4)  (IV  4))
                ((V   4)  (IV  4))
                ((VI  4)  (i   4))
                ((VI  5)  (III 3))
                ((VI  8)  (III 1) (iv 4) (IVo 4))))

(define initial-degree '(i 24))

(define vol-trans '((40 40 50)
                    (50 40 50 60)
                    (60 40 50 60 70)
                    (70 50 60 70 80)
                    (80 60 70 80 90)
                    (90 70 80 90)))

(define dynamic-vol-trans '((30 40 50 60)
                            (40 30 50 60 70)
                            (50 30 40 60 70)
                            (60 40 50 70)
                            (70 50 60 80)
                            (80 60 70)
                            (90 70 80)))

(define timings '((1/2 1/2 1/2 1/4 1)
                  (1/4 1/4 1/4 1/8 1/2)
                  (1/8 1/8 1/8 1/4 1/2)
                  (1 1 1 1/2 1/2 1/2 2)
                  (2 2 1 1/2)))

(define initial-volume 50)

(define play-note
  (lambda (beat dur note vol)
    (mplay *midiout*
           note
           ;;vol
           (random (cdr (assoc vol dynamic-vol-trans)))
           dur
           midi-channel)))

(define play-melody
  (lambda (beat max-dur dur notes vol total-dur)
    (let* ((total-dur (+ total-dur dur))
           (next-play (+ beat dur))
           (note (random notes)))
      (if (< total-dur max-dur)
          (begin
            ;; Either play a note or rest
            (if (> (random) 0.25)
                (play-note beat dur note vol))
            (callback (*metro* next-play)
                      'play-melody
                      next-play
                      max-dur
                      (random (cdr (assoc dur timings)))
                      notes
                      (random (cdr (assoc vol vol-trans)))
                      total-dur))))))

(define play-chords
  (lambda (beat dur chord vol)
    (for-each (lambda (note)
                (play-note beat dur note vol))
              chord)))

(define play-arppegio
  (lambda (beat max-dur notes vol total-dur)
    (let* ((dur 1)
           (total-dur (+ total-dur dur))
           (next-play (+ beat dur))
           (note (car notes))
           (rest (cdr notes)))
      (if (< total-dur max-dur)
          (begin
            (play-note beat dur note vol)
            (callback (*metro* next-play)
                      'play-arppegio
                      next-play
                      max-dur
                      (append rest (list note))
                      (random (cdr (assoc vol dynamic-vol-trans)))
                      total-dur))))))

(define progression
  (lambda (beat degree-dur k m l h npc vol)
    (let* ((d (car degree-dur))
           (dur (cadr degree-dur))
           (tri (triad k d))
           (chord (pc:make-chord l h npc tri))
           (melody (pc:make-chord (+ l 12) (+ h 24) 12 tri)))
      (println 'Degree/duration: degree-dur)
      (println (assoc degree-dur trans))
      ;; Reset the sustain
      (send-midi-cc (now) *midiout* 64 midi-off midi-channel)
      (send-midi-cc (now) *midiout* 64 midi-on midi-channel)
      ;; Play the piano's bass notes
      (if (> (random) 0.25)
          (play-chords beat dur chord vol)
          (play-arppegio beat dur chord vol 0))
      ;; Play the melody
      (play-melody beat dur 1 melody vol 0)
      
      ;; Allow different chord transitions at different times
      (let* ((next-degree (random (cdr (assoc degree-dur trans))))
             (next-vol (random (cdr (assoc vol vol-trans)))))
        ;; Set up the next chunk of the progression to be played
        (callback (*metro* (+ beat (* 1 dur)))
                  'progression
                  (+ beat dur)
                  next-degree
                  key
                  mode
                  l
                  h
                  notes-per-chord
                  next-vol)))))

;; Start the progression
(progression (*metro* 'get-beat beats-per-measure)
             initial-degree
             key
             mode
             low
             high
             notes-per-chord
             initial-volume)

;; Stop the progression
(define progression
  (lambda (beat dur total-dur degree low high) #t))






;;; More triads than what are supported in Extempore

(define chords
  (list
   (list c3 eb3 gb3)  ; dim
   (list c3 eb3 g3)   ; min
   (list c3 e3  g3)   ; maj
   (list c3 e3  g#3)  ; aug
   (list c3 d3  g3)   ; sus4
   (list c3 f3  g3)   ; sus2
   (list c3 f#3 g3)   ; lyd
   (list c3 db3 gb3)  ; loc
   (list c3 f3  gb3)  ; sus4b5
   (list c3 db3 g3)   ; phr
    ))

(define prog
  (lambda (beat dur vol chds)
      ;; Play the piano's chords
    (for-each
     (lambda (note)
       (mplay *midiout*
              note
              vol
              dur
              midi-channel))
     (car chds))
    
    (callback (*metro* (+ beat (* 1 dur)))
              'prog
              (+ beat dur)
              dur
              vol
              (cdr chds))))

;; Start the progression
(prog (*metro* 'get-beat beats-per-measure)
      8
      70
      chords)

;; Stop the progression
(define prog
  (lambda (beat dur vol) #t))
